=encoding utf8

=head1 NAME

MYDLjE::Guides::Devs - know how to contribute code to MYDLjE

=head1 INTRO

MYDLjE is simply a bundle of three L<Mojolicious> applications that 
share a lot of code and work together well. 
So I<everything> you know so far about L<Mojolicious> applies.
If you are not sure what We are talking about, go to L<Mojolicious::Guides> 
and then come back.

You are back? Great! Now we can get to the point.

=head1 FILES STRUCTURE


  $ENV{MOJO_HOME}
      |-- conf
      |-- cpanel*
      |-- favicon.ico
      |-- index.xhtml
      |-- LGPLv3.0.txt
      |-- log
      |-- mydlje*
      |-- perl
      |   |-- bin
      |   |-- lib
      |   |-- site
      |   `-- t
      |-- pub
      |   |-- css
      |   |-- dtd
      |   |-- home
      |   `-- js
      |-- README.html
      |-- README.pod
      |-- site*
      |-- templates
      |   |-- cpanel
      |   `-- layouts
      `-- tmp

L<MOJO_HOME|Mojolicious::Guides::Cheatsheet/MOJO_HOME> is the root directory for your L<MYDLjE>-based system. It is auto-discovered when an application starts. 
The three applications C<cpanel>, C<mydlje> and C<site> reside in C<MOJO_HOME>. 
This is possible thanks to the L<Mojolicious> flexibility.

In the C<conf> directory are the configuration files. They are in YAML format. By default L<YAML::Tiny> is used for parsing, but if you have L<YAML> installed it will be used instead.
See L<YAML::Any> for details.  See L<MYDLjE::Config> for details on how it works. 

In C<conf> you will also find C<mysql.schema.sql>, C<mysql.data.sql> and C<mysql.queries.sql>.
The first is used to initialize the database(create tables add constraints) during L<MYDLjE> installation. The second is parsed and statements in it are executed just after the first. The last file contains commonly used queries and part of queries (C<WHERE> clauses). 
You can add your own queries there.

Note that these C<*.sql> files are well-formed and valid xml files. It turned out to be very convenient to use L<Mojo::DOM> to parse them and in the same time keep most text editors syntax highliting happy.

  -- <query name="write_permissions_sql" params="user_id,user_id"><![CDATA[
    
    (
      (user_id = ? AND permissions LIKE '_rw%')
      OR ( group_id IN (SELECT group_id FROM user_group WHERE user_id= ?) 
        AND permissions LIKE '____rw%')
    )
  
  -- ]]></query>

The C<log> folder is for the log files. Note that some early warnings or errors may be logged to the Apache log. 
    #Example:
    cd ~/opt/public_dev/MYDLjE/; tail -n200 -f log/development.log

In C<perl/bin> we keep utility commandline scripts. Everything from Mojo scripts folder is also there. In L<perl/lib> are all the Perl Modules that come bundled with L<MYDLjE>. C<perl/site/bin> and C<perl/site/lib> are intended for your custom, aplication specific code. These folders will not be ever touched if you upgrade MYDLjE.

=head1 PERL MODULES

=head1 XHTML

MYDLjE sends to the browser 100% well formed XML output.

=head1 JavaScript




=head1 SCALABILITY


=head2 Tests

Tests, Perltidy and PerlCritc are run by 
$ENV{MOJO_HOME}/perl/bin/diagnostics.

=head2 Perl Best Practices

To enforce a common perl style we use L<perlcritic>.
The configuration file is $ENV{MOJO_HOME}/.perlcriticrc

=head2 Qunit

TODO: add Qunit
L<http://docs.jquery.com/Qunit>

=head1 PLUGINS

=head2 MYDLjE/Mojolicious Plugins

=head2 Template Plugins

=head1 MYDLjE/Mojolicious Applications

As you already know from the L<README>, there are three applications that compose the 
MYDLjE Application and Content Management Framework. These are
L<MYDLjE>, L<MYDLjE::ControlPanel> and L<MYDLjE::Site>. 
C<cpanel>, C<mydlje> and C<site> are simply startup scripts.

You can write your own custom applications which do not use MYDLjE code at all, 
but are based on Mojolicious only. In it's turn Mojolicious allows you to 
use only what you want from it. 
You can also write front-end applications similar to L<site> and use the MYDLjE 
framework, database etc. You can also write embedded "applications" 
which run in the site application or even embedded in a L<site> page. 
How you will approach depends completely on you. 

As you see we use the term "application" pretty deliberatly 
and we mean by it I<something which is logically complete>.
The I<shop> application may be implemented as a controller class 
(MYDLjE::Site::C::Shop) with its own actions. 
The I<forum> application may be represented by a page record in which a 
Template plugin is called and its all business logic happens there 
(in one page of your site).

Finally... this is Perl. However some recommended approaches are described below.

=head2 MYDLjE application

TODO....

=head2 MYDLjE::Site application

TODO....

=head2 Application embedded into MYDLjE::Site::C::Site->page

TODO....




=head1 SEE ALSO

L<MYDLjE::Guides>, L<MYDLjE::Guides::Admins>, 
L<MYDLjE::Guides::Design>

=head1 AUTHOR AND COPYRIGHT

(c) 2011 Красимир Беров L<k.berov@gmail.com>

MYDLjE code is licensed under LGPLv3.


=begin html

<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/"><img alt="Creative Commons License" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/80x15.png" /></a><br /><span xmlns:dct="http://purl.org/dc/terms/" href="http://purl.org/dc/dcmitype/Text" property="dct:title" rel="dct:type">MYDLjE::Guides</span> by <a xmlns:cc="http://creativecommons.org/ns#" href="https://github.com/kberov/MYDLjE" property="cc:attributionName" rel="cc:attributionURL">Красимир Беров</a> is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/">Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License</a>.<br />Based on a work at <a xmlns:dct="http://purl.org/dc/terms/" href="https://github.com/kberov/MYDLjE/blob/master/perl/lib/MYDLjE/Guides.pod" rel="dct:source">github.com</a>.

=end html

